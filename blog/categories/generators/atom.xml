<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: generators | Blog pythonista]]></title>
  <link href="http://shoonoise.github.io/blog/categories/generators/atom.xml" rel="self"/>
  <link href="http://shoonoise.github.io/"/>
  <updated>2013-10-08T14:55:11+04:00</updated>
  <id>http://shoonoise.github.io/</id>
  <author>
    <name><![CDATA[Alexander Kushnarev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Сопрограммы в Python]]></title>
    <link href="http://shoonoise.github.io/blog/2013/09/15/coroutines-in-python/"/>
    <updated>2013-09-15T21:08:00+04:00</updated>
    <id>http://shoonoise.github.io/blog/2013/09/15/coroutines-in-python</id>
    <content type="html"><![CDATA[<h1>Генераторы</h1>

<p>Любой более-менее приличный програмист на Python значет, что есть в питоне такая замечательная штука, как функции-генераторы. Главная их особенность &ndash; это сохранение состояния между вызовами.</p>

<p>Напомню, как это выглядит.</p>

<!-- more -->


<p><em>Возьмём вот такую функцию:</em></p>

<p>```python</p>

<p>def read_file_line_by_line(file_name):
  with open(file_name, &lsquo;r&rsquo;) as f:</p>

<pre><code>  while True:
    line = f.readline()
    if not line:
      break
    yield line
</code></pre>

<p>```</p>

<p>Эта функция принимает на вход имя файла и возвращает его строчка за строчкой, не загружая целиком в память, что может быть необходимо при чтении больших файлов.</p>

<blockquote><p>Такой приём называют ленивым (lazy) чтением, подразумевая, что мы не делаем работу без необходимости.</p></blockquote>

<p><em>Получаем генератор:</em></p>

<p>```python</p>

<p>In [78]: lines_generator = read_file_line_by_line(&ldquo;data.csv&rdquo;)
In [79]: type(lines_generator)
Out[79]: generator
In [83]: lines_generator.next()
Out[83]: &lsquo;time,host,event\n&rsquo;
In [84]: lines_generator.next()
Out[84]: &lsquo;1374039728,localhost,reboot\n&rsquo;
In [85]: lines_generator.next()
Out[85]: &lsquo;1374039730,localhost,start\n&rsquo;
In [86]: lines_generator.next()</p>

<hr />

<p>StopIteration                             Traceback (most recent call last)</p>

<p>&lt;ipython-input-86-65df1a2cb71b> in <module>()</p>

<p>&mdash;&mdash;> 1 lines_generator.next()</p>

<p>StopIteration:</p>

<h1>Соответственно у меня в файле только 3 строчки</h1>

<h1>Как только читать больше нечего, возникает StopIteration эксепшн, как и с любым итерируемым оъектом.</h1>

<p>```</p>

<p><em>Естественно, чаще мы читаем значения из генератора в цикле, а не построчно:</em></p>

<p>```python
uniq = []
for line in lines_generator:
  if line not in uniq:</p>

<pre><code>  uniq.append(line)
</code></pre>

<h1>Пример надуманный, вероятно для таких выкрутасов лучше всё в set добавить, но это не имеет значения сейчас</h1>

<p>```</p>

<p><em>Возможна короткая записть генератора:</em></p>

<p><code>python
In [92]: gen = (x for x in range(0, 100*10000))
In [93]: gen.next()
Out[93]: 0
In [94]: gen.next()
Out[94]: 1
In [95]: gen.next()
Out[95]: 2
In [96]: gen.next()
Out[96]: 3
In [97]: gen.next()
Out[97]: 4
</code>
Соответственно нам не надо загружать в память весь список <code>range(0, 100*10000)</code>, возвращаемое значение &ldquo;вычисляется&rdquo; каждый раз при обращении.</p>

<blockquote><p>Внимание, это не то же самое что списковые выражения!</p></blockquote>

<p>Они возвращают весь список целиком сразу.</p>

<p><code>python
In [104]: type([x for x in range(0, 10)])
Out[104]: list
In [105]: type((x for x in range(0, 10)))
Out[105]: generator
</code></p>

<h1>Сопрограммы как частный случай генераторов</h1>

<p>А теперь о том, ради чего это, собственно, затевалось. Оказывается, генератор может не только возвращать значения, но и принимать их на вход.</p>

<p>О стандарте можно почитать тут <a href="http://www.python.org/dev/peps/pep-0342/">PEP 342</a>.</p>

<p>Предлагаю сразу начать с примера. Напишем простую реализацию генератора, который может складывать два аргумента и хранить историю результатов.</p>

<p>```python
def calc():</p>

<pre><code>history = []
while True:
    x, y = (yield)
    if x == 'h':
        print history
        continue
    result = x + y
    print result
    history.append(result)
</code></pre>

<p>c = calc()</p>

<p>print type&copy; # <type 'generator'></p>

<p>c.next() # Необходимая инициация. Можно написать c.send(None)
c.send((1,2)) # Выведет 3
c.send((100, 30)) # Выведет 130
c.send((666, 0)) # Выведет 666
c.send((&lsquo;h&rsquo;,0)) # Выведет [3, 130, 666]
c.close() # Закрывем генератор
```</p>

<p>Т.е. мы создали генератор, проинициализировали его и подаём ему входные данные.</p>

<p>Он, в свою очередь, эти данные обрабатывает и <em>сохраняет своё состояние между вызовами до тех пор пока мы его не закрыли</em>. После каждого вызова генератор <em>возвращает управление туда, откуда его вызвали</em>.</p>

<p>Тут бы следовало что-то рассказать о конечных автоматах, но, вероятно, я попробую написать об этом отдельно.</p>

<p>Так, с тем, как это работает, вроде, разобрались.</p>

<p>Давайте теперь избавим себя от необходимости каждый раз руками инициализировать генератор.</p>

<p><em>Сделать это можно примерно так:</em></p>

<p>```python
def coroutine(f):</p>

<pre><code>def wrap(*args,**kwargs):
    gen = f(*args,**kwargs)
    gen.send(None)
    return gen
return wrap
</code></pre>

<p>@coroutine
def calc():</p>

<pre><code>history = []
while True:
    x, y = (yield)
    if x == 'h':
        print history
        continue
    result = x + y
    print result
    history.append(result)
</code></pre>

<p>```</p>

<p>Тут всё понятно, я думаю.</p>

<p>Сопрограммы могут быть очень полезным инструментом в вашем арсенале разработчика, поскольку они достаточно наглядны, и при этом создание фунций более дешёвая операция по сравнению с созданием объекта класса.</p>

<p>Да и определённый академический интерес они представляют, как мне кажется.</p>

<p>Вот такая вот первая статья.</p>

<p>Опечатки, ошибки, замечания и пожелания можно присылать на <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#x68;&#x6f;&#x6f;&#x6e;&#111;&#x69;&#x73;&#x65;&#64;&#103;&#x6d;&#x61;&#108;&#x2e;&#x63;&#111;&#x6d;">&#115;&#x68;&#111;&#111;&#110;&#111;&#105;&#x73;&#x65;&#x40;&#x67;&#109;&#97;&#108;&#x2e;&#x63;&#111;&#109;</a></p>
]]></content>
  </entry>
  
</feed>
