<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog pythonista]]></title>
  <link href="http://shoonoise.github.io/atom.xml" rel="self"/>
  <link href="http://shoonoise.github.io/"/>
  <updated>2013-10-08T12:00:05+04:00</updated>
  <id>http://shoonoise.github.io/</id>
  <author>
    <name><![CDATA[Alexander Kushnarev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Автоматное программирование]]></title>
    <link href="http://shoonoise.github.io/blog/2013/09/16/state-machines-in-python/"/>
    <updated>2013-09-16T08:59:00+04:00</updated>
    <id>http://shoonoise.github.io/blog/2013/09/16/state-machines-in-python</id>
    <content type="html"><![CDATA[<p>Вместо эпиграфа приведу <a href="http://lkml.indiana.edu/hypermail/linux/kernel/0106.2/0405.html">цитату</a> умного <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B0%D0%BD_%D0%9A%D0%BE%D0%BA%D1%81">человека</a>. Касющуюся, впрочем, конкреного event-driven программирования:</p>

<blockquote><p>«Компьютер — это конечный автомат. Потоковое программирование нужно тем, кто не умеет программировать конечные автоматы»</p></blockquote>

<p>Так как никто не хочет быть в категории “неумех”, я сегодня постараюсь показать приём программирования условного автомата.</p>

<p>В статье я буду пошагово описывать создание своего обработчика простой разметки текста на Python.</p>

<!-- more -->


<h3>Немного теории</h3>

<p>Вместо того косноязычного определения что могу дать я, приведу цитату из википедии:</p>

<blockquote><p>Автома́тное программи́рование — это парадигма программирования, при использовании которой программа или её фрагмент осмысливается как модель какого-либо формального автомата. В зависимости от конкретной задачи в автоматном программировании могут использоваться как конечные автоматы, так и автоматы более сложной структуры.</p></blockquote>

<p>Давайте поговорим о автомате (<em>State Machine</em>). Чем он у нас определяется?</p>

<ul>
<li>Входные данные (с заранее известным возможным набором данных или алфавитом).</li>
<li>Конечное множество состояний, которые может принимать автомат.</li>
<li>Начальное состояние.</li>
<li>Таблица переходов, определяющая правила перехода из состояния в состояние в зависимости от текущего состояния и входного значения (у нас детерминированный автомат).</li>
</ul>


<p><em>Если вы не прогуливали теорию автоматов в ВУЗе, как я, то вы и так это всё знаете.</em></p>

<h3>Практика</h3>

<p><strong>Задача:</strong></p>

<p>В качестве задания я решил взять типичную для программирования автоматов задачу &ndash; простенький обработчик разметки.</p>

<p>Наш обработчик будет поддерживать только 2 типа разметки:</p>

<ul>
<li>*<em>курсивное</em>* начертание</li>
<li>**<strong>жирное</strong>** начертание</li>
</ul>


<p>На входе строка, в которой строки размеченны с помощью * и **, а на выходе &ndash; форматированный HTML.</p>

<p><strong>Решение:</strong></p>

<p><em>Определим количество возможных состояний.</em></p>

<h5>Возможные состояния:</h5>

<ul>
<li>Начальное состояние &ndash; <code>plain_text</code></li>
<li>Состояние <code>pre_bold</code> &ndash; когда встретили первую <code>*</code></li>
<li>Состояние <code>bold</code> &ndash; когда встретили вторую <code>*</code> вподряд</li>
<li>Состояние <code>italic</code> &ndash; когда после первой <code>*</code> у нас, по крайней мере, один обычный символ</li>
<li>Состояние <code>pre_end_dold</code> &ndash; когда встретили первую закрывающую <code>*</code></li>
</ul>


<p>Как вы могли заметить, нам пришлось внести два не самых очевидных состояния &ndash; <code>pre_bold</code> и <code>pre_end_bold</code>.
Дело в том, что когда мы получаем первый символ <code>*</code>, мы не можем однозначно сказать что от нас требуется италик или болд, и требуется ли вообще менять состояние, поэтому мы вынуждены ввести некие &ldquo;промежуточные&rdquo; состояния (костыль для сохранения детерминированности. Увеличиваем таблицу переходов, но упрощаем логику).</p>

<p> <em>Определим правила перехода из одного состояние в другое.</em></p>

<h5>Таблица переходов:</h5>

<table>
<thead>
<tr>
<th></th>
<th> Input \ State</th>
<th>plain_text  </th>
<th>pre_bold    </th>
<th>bold          </th>
<th>italic        </th>
<th>pre_end_bold</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>*             </td>
<td>pre_bold    </td>
<td>bold        </td>
<td>pre_end_bold  </td>
<td>plain_text    </td>
<td>plain_text  </td>
</tr>
<tr>
<td></td>
<td>other symbol  </td>
<td>plain_text  </td>
<td>italic      </td>
<td>plain_text    </td>
<td>plain_text    </td>
<td>plain_text  </td>
</tr>
</tbody>
</table>


<p>В строках у нас описаны входные символы, у нас их может быть всего 2 типа: символ <code>*</code> и любой другой символ.
В столбцах у нас описаны все наши состояния. На пересечении &ndash; состояние в которое переходим.
То есть если мы находимся в состоянии <code>plain_text</code> и получаем на вход <code>*</code>, то мы переходим в состояние <code>pre_bold</code>.
А в случае, если мы в состоянии <code>pre_bold</code> и получаем на вход символ отличный от <code>*</code>, то мы переходим в состоние <code>italic</code>.</p>

<h3>Кодирование</h3>

<p>А теперь самое интересное &ndash; перевод нашего решениея в код.</p>

<p>В первом приближении у меня получилось, следующее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SimpleMark</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PLAIN_TEXT</span> <span class="o">=</span> <span class="s">&#39;plain_text&#39;</span>
</span><span class='line'>    <span class="n">PRE_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_bold&#39;</span>
</span><span class='line'>    <span class="n">BOLD</span> <span class="o">=</span> <span class="s">&#39;bold&#39;</span>
</span><span class='line'>    <span class="n">ITALIC</span> <span class="o">=</span> <span class="s">&#39;italic&#39;</span>
</span><span class='line'>    <span class="n">PRE_END_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_end_bold&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__handle_input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;b&gt;&#39;</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;/i&gt;&#39;</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;/b&gt;&#39;</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;i&gt;&#39;</span> <span class="o">+</span> <span class="n">symbol</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="n">symbol</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Пока выглядит как то <em>не_очень</em>, правда?</p>

<p>Давайте попробуем зарефакторить наш код.</p>

<p>Во-первых, куча <code>if, elif и else</code> выглядит неприятно (особенно, если в вашем любимом языке программирования есть конструкция <code>switch/case</code>). Во-вторых, было бы не плохо вынести работу каждого шага в отдельную функцию (что с точки зрения автоматов является идеологический верным).</p>

<p><em>Вынесем работу шагов автомата в функции:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SimpleMark</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PLAIN_TEXT</span> <span class="o">=</span> <span class="s">&#39;plain_text&#39;</span>
</span><span class='line'>    <span class="n">PRE_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_bold&#39;</span>
</span><span class='line'>    <span class="n">BOLD</span> <span class="o">=</span> <span class="s">&#39;bold&#39;</span>
</span><span class='line'>    <span class="n">ITALIC</span> <span class="o">=</span> <span class="s">&#39;italic&#39;</span>
</span><span class='line'>    <span class="n">PRE_END_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_end_bold&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_pre_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;b&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_pre_end_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_italic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;i&gt;&#39;</span> <span class="o">+</span> <span class="n">symbol</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_end_italic</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;/i&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_end_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;/b&gt;&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__handle_input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__set_pre_bold</span><span class="p">()</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__set_bold</span><span class="p">()</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__set_pre_end_bold</span><span class="p">()</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__set_end_italic</span><span class="p">()</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__set_end_bold</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__set_italic</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="n">symbol</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>А теперь воспользуемся обычным рецептом эмуляции <code>switch/case</code>:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SimpleMark</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PLAIN_TEXT</span> <span class="o">=</span> <span class="s">&#39;plain_text&#39;</span>
</span><span class='line'>    <span class="n">PRE_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_bold&#39;</span>
</span><span class='line'>    <span class="n">BOLD</span> <span class="o">=</span> <span class="s">&#39;bold&#39;</span>
</span><span class='line'>    <span class="n">ITALIC</span> <span class="o">=</span> <span class="s">&#39;italic&#39;</span>
</span><span class='line'>    <span class="n">PRE_END_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_end_bold&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_pre_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;b&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_pre_end_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_italic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;i&gt;&#39;</span> <span class="o">+</span> <span class="n">symbol</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_end_italic</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;/i&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_end_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="s">&#39;&lt;/b&gt;&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEX</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__update_buffer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="n">symbol</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__handle_input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="n">jump_table_1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_pre_bold</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_bold</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_pre_end_bold</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_end_italic</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_end_bold</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">jump_table_2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_italic</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">jump_table_1</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">__state</span><span class="p">]()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">jump_table_2</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">__state</span><span class="p">](</span><span class="n">symbol</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Помимо того что я использовал словарь, что бы определить связь состояние-действие для каждого из возможных состояний, я выделил ещё одну функцию <code>__update_buffer</code>, что бы была возможность явно описать переходы для второй строчки (в коде <code>jump_table_2</code>) нашей таблицы.</p>

<p>Теперь сделаем наш автомат &ldquo;рабочим&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SimpleMark</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PLAIN_TEXT</span> <span class="o">=</span> <span class="s">&#39;plain_text&#39;</span>
</span><span class='line'>    <span class="n">PRE_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_bold&#39;</span>
</span><span class='line'>    <span class="n">BOLD</span> <span class="o">=</span> <span class="s">&#39;bold&#39;</span>
</span><span class='line'>    <span class="n">ITALIC</span> <span class="o">=</span> <span class="s">&#39;italic&#39;</span>
</span><span class='line'>    <span class="n">PRE_END_BOLD</span> <span class="o">=</span> <span class="s">&#39;pre_end_bold&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Have no output data yet.&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_pre_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;&lt;b&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_pre_end_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_italic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;&lt;i&gt;&#39;</span> <span class="o">+</span> <span class="n">symbol</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_end_italic</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;&lt;/i&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__set_end_bold</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;&lt;/b&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__update_buffer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">symbol</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__handle_input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="n">jump_table_1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_pre_bold</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_bold</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_pre_end_bold</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_end_italic</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_end_bold</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">jump_table_2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PLAIN_TEXT</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__set_italic</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span><span class="p">,</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">PRE_END_BOLD</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">__update_buffer</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="n">jump_table_1</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">__state</span><span class="p">]()</span> <span class="ow">or</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__buffer</span> <span class="o">+=</span> <span class="n">jump_table_2</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">__state</span><span class="p">](</span><span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__handle_input</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">machine</span> <span class="o">=</span> <span class="n">SimpleMark</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;*italic* **BOLD** plain **BOLD** *italic*&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>        <span class="n">machine</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">machine</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Изменения:</p>

<ul>
<li><p>Добавил свойство output, которое возвращает текущее значение на выходе нашего автомата</p></li>
<li><p>Добавил метод input</p></li>
<li><p>Уменьшил количество мест, где меняется состояние выхода нашего автомата до 2-х (ибо нефиг)</p></li>
</ul>


<p>Результат:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="err">⮀</span> <span class="n">python</span> <span class="n">state_machine</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">i</span><span class="o">&gt;</span><span class="n">italic</span><span class="o">&lt;/</span><span class="n">i</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="n">BOLD</span><span class="o">&lt;/</span><span class="n">b</span><span class="o">&gt;</span> <span class="n">plain</span> <span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="n">BOLD</span><span class="o">&lt;/</span><span class="n">b</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">i</span><span class="o">&gt;</span><span class="n">italic</span><span class="o">&lt;/</span><span class="n">i</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Что ещё?</h3>

<p>Обрабатывать говтовую строку не интересно, но если принимать от пользователя вводимые символы и одновременно с этим выводить результат в HTML, то мы получим самый настоящий интерактивный редактор для нашей разметки.</p>

<p>Естественно, можно добавить к этому больше событий (в том числе и удаление символа), и получить, например, обработчик разметки <a href="http://ru.wikipedia.org/wiki/Markdown">MarkDown&#8217;а</a> как <a href="http://mouapp.com/">Mou</a>, но это выходит далеко за рамки обучающей статьи.</p>

<h3>Заключение</h3>

<p>Понимание автоматного программирования трудно перееоценить. На его основе построенна работа лексических анализаторов, событийно-ориентированных фреймворков (например <a href="http://twistedmatrix.com">Twisted&#8217;а</a>), регулярных выражений и т.д..</p>

<p>Эта статья не ставит перед собой цель дать исчерпывающие ответы, а ставит цель заинтересовать читателя в этой теме.</p>

<p>На этом всё. Спасибо что дочитали статью.</p>

<p>Замечания, по прежнему, принимаются на <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#x73;&#x68;&#x6f;&#x6f;&#x6e;&#111;&#x69;&#115;&#x65;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;&#x2e;">&#x73;&#104;&#x6f;&#x6f;&#110;&#x6f;&#x69;&#115;&#101;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;&#46;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сопрограммы в Python]]></title>
    <link href="http://shoonoise.github.io/blog/2013/09/15/coroutines-in-python/"/>
    <updated>2013-09-15T21:08:00+04:00</updated>
    <id>http://shoonoise.github.io/blog/2013/09/15/coroutines-in-python</id>
    <content type="html"><![CDATA[<h1>Генераторы</h1>

<p>Любой более-менее приличный програмист на Python значет, что есть в питоне такая замечательная штука, как функции-генераторы. Главная их особенность &ndash; это сохранение состояния между вызовами.</p>

<p>Напомню, как это выглядит.</p>

<!-- more -->


<p><em>Возьмём вот такую функцию:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">read_file_line_by_line</span><span class="p">(</span><span class="n">file_name</span><span class="p">):</span>
</span><span class='line'>  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>      <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">line</span>
</span></code></pre></td></tr></table></div></figure>


<p>Эта функция принимает на вход имя файла и возвращает его строчка за строчкой, не загружая целиком в память, что может быть необходимо при чтении больших файлов.</p>

<blockquote><p>Такой приём называют ленивым (lazy) чтением, подразумевая, что мы не делаем работу без необходимости.</p></blockquote>

<p><em>Получаем генератор:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">78</span><span class="p">]:</span> <span class="n">lines_generator</span> <span class="o">=</span> <span class="n">read_file_line_by_line</span><span class="p">(</span><span class="s">&quot;data.csv&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">79</span><span class="p">]:</span> <span class="nb">type</span><span class="p">(</span><span class="n">lines_generator</span><span class="p">)</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">79</span><span class="p">]:</span> <span class="n">generator</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">83</span><span class="p">]:</span> <span class="n">lines_generator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">83</span><span class="p">]:</span> <span class="s">&#39;time,host,event</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">84</span><span class="p">]:</span> <span class="n">lines_generator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">84</span><span class="p">]:</span> <span class="s">&#39;1374039728,localhost,reboot</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">85</span><span class="p">]:</span> <span class="n">lines_generator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">85</span><span class="p">]:</span> <span class="s">&#39;1374039730,localhost,start</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">86</span><span class="p">]:</span> <span class="n">lines_generator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">---------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="ne">StopIteration</span>                             <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">86</span><span class="o">-</span><span class="mi">65</span><span class="n">df1a2cb71b</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">lines_generator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Соответственно у меня в файле только 3 строчки </span>
</span><span class='line'><span class="c"># Как только читать больше нечего, возникает StopIteration эксепшн, как и с любым итерируемым оъектом. </span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Естественно, чаще мы читаем значения из генератора в цикле, а не построчно:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uniq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines_generator</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">line</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">uniq</span><span class="p">:</span>
</span><span class='line'>      <span class="n">uniq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'><span class="c"># Пример надуманный, вероятно для таких выкрутасов лучше всё в set добавить, но это не имеет значения сейчас</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><em>Возможна короткая записть генератора:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">92</span><span class="p">]:</span> <span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="mi">10000</span><span class="p">))</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">93</span><span class="p">]:</span> <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">93</span><span class="p">]:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">94</span><span class="p">]:</span> <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">94</span><span class="p">]:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">95</span><span class="p">]:</span> <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">95</span><span class="p">]:</span> <span class="mi">2</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">96</span><span class="p">]:</span> <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">96</span><span class="p">]:</span> <span class="mi">3</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">97</span><span class="p">]:</span> <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">97</span><span class="p">]:</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Соответственно нам не надо загружать в память весь список <code>range(0, 100*10000)</code>, возвращаемое значение &ldquo;вычисляется&rdquo; каждый раз при обращении.</p>

<blockquote><p>Внимание, это не то же самое что списковые выражения!</p></blockquote>

<p>Они возвращают весь список целиком сразу.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">104</span><span class="p">]:</span> <span class="nb">type</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)])</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">104</span><span class="p">]:</span> <span class="nb">list</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">105</span><span class="p">]:</span> <span class="nb">type</span><span class="p">((</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)))</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">105</span><span class="p">]:</span> <span class="n">generator</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Сопрограммы как частный случай генераторов</h1>

<p>А теперь о том, ради чего это, собственно, затевалось. Оказывается, генератор может не только возвращать значения, но и принимать их на вход.</p>

<p>О стандарте можно почитать тут <a href="http://www.python.org/dev/peps/pep-0342/">PEP 342</a>.</p>

<p>Предлагаю сразу начать с примера. Напишем простую реализацию генератора, который может складывать два аргумента и хранить историю результатов.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">calc</span><span class="p">():</span>
</span><span class='line'>    <span class="n">history</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s">&#39;h&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">history</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">result</span>
</span><span class='line'>        <span class="n">history</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">calc</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">type</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c"># &lt;type &#39;generator&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="c"># Необходимая инициация. Можно написать c.send(None)</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">send</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="c"># Выведет 3</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">send</span><span class="p">((</span><span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span> <span class="c"># Выведет 130</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">send</span><span class="p">((</span><span class="mi">666</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="c"># Выведет 666</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">send</span><span class="p">((</span><span class="s">&#39;h&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="c"># Выведет [3, 130, 666]</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> <span class="c"># Закрывем генератор</span>
</span></code></pre></td></tr></table></div></figure>


<p>Т.е. мы создали генератор, проинициализировали его и подаём ему входные данные.</p>

<p>Он, в свою очередь, эти данные обрабатывает и <em>сохраняет своё состояние между вызовами до тех пор пока мы его не закрыли</em>. После каждого вызова генератор <em>возвращает управление туда, откуда его вызвали</em>.</p>

<p>Тут бы следовало что-то рассказать о конечных автоматах, но, вероятно, я попробую написать об этом отдельно.</p>

<p>Так, с тем, как это работает, вроде, разобрались.</p>

<p>Давайте теперь избавим себя от необходимости каждый раз руками инициализировать генератор.</p>

<p><em>Сделать это можно примерно так:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">coroutine</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="n">gen</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">gen</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrap</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@coroutine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">calc</span><span class="p">():</span>
</span><span class='line'>    <span class="n">history</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s">&#39;h&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">history</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">result</span>
</span><span class='line'>        <span class="n">history</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Тут всё понятно, я думаю.</p>

<p>Сопрограммы могут быть очень полезным инструментом в вашем арсенале разработчика, поскольку они достаточно наглядны, и при этом создание фунций более дешёвая операция по сравнению с созданием объекта класса.</p>

<p>Да и определённый академический интерес они представляют, как мне кажется.</p>

<p>Вот такая вот первая статья.</p>

<p>Опечатки, ошибки, замечания и пожелания можно присылать на <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#115;&#104;&#x6f;&#111;&#x6e;&#x6f;&#x69;&#x73;&#101;&#64;&#x67;&#x6d;&#x61;&#108;&#46;&#x63;&#111;&#109;">&#115;&#x68;&#x6f;&#x6f;&#110;&#111;&#105;&#115;&#101;&#x40;&#103;&#109;&#97;&#108;&#x2e;&#x63;&#111;&#109;</a></p>
]]></content>
  </entry>
  
</feed>
